#summary Illustrates how to implement different fare structures with the GTFS

= Introduction =

The [http://code.google.com/transit/spec/transit_feed_specification.html#fare_attributes_txt___Field_Definitions fare_attributes.txt] and [http://code.google.com/transit/spec/transit_feed_specification.html#fare_rules_txt___Field_Definitions fare_rules.txt] files in the [http://code.google.com/transit/spec/transit_feed_specification.html Google Transit Feed Specification] can be confusing. The following examples work through different kinds of fare structures and show how to represent them in a Google transit feed.

-----

== Example 1: All trips have the same fare, unlimited transfers == 

Suppose Demo Transit agency has the following fare structure:
  * riders pay 1$ on boarding (price='1',currency='USD', payment_method='0')
  * a ticket is good for all vehicles and doesn't expire (transfers='')
  * passengers can ride as long as they like. (transfer_duration is omitted) 

Since all trips have the same fare, Demo Transit can omit fare_rules.txt. 

====fare_attributes.txt====
|| *fare_id* || *price* || *currency_type* || *payment_method* || *transfers* ||
|| only_fare || 1.00 || USD || 0 ||||

 

===Calculating an adult fare===
The trip planner calculates a fare of 1$ for each leg of the itinerary that includes a change of vehicle. However, unlimited transfers are permitted, so the trip planner only displays the lowest charge. Adult fare: 1$
-----
== Example 2: All trips have the same fare, no transfers == 

Suppose Demo Transit agency has the following fare structure:
  * riders pay 1$ on boarding (price='1',currency='USD', payment_method='0')
  * passengers can ride as long as they like. (transfer_duration is omitted)
  * any change in vehicles requires a new fare. (transfers='0')

Since all trips have the same fare, Demo Transit can omit fare_rules.txt. 
====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* ||
|| only_fare || 1.00 || USD || 0 || 0 ||

 

===Calculating an adult fare===
The trip planner calculates a fare of 1$ for each leg of the itinerary that includes a change of vehicle. So an itinerary that requires a change of buses would be 2$.
-----
== Example 3: All trips have the same fare, transfers allowed == 

Suppose Demo Transit agency has the following fare structure:
  * riders pay 1$ on boarding (price='1',currency='USD', payment_method='0')
  * unlimited transfers are allowed within 90 minutes (transfers='',transfer_duration='5400')

Since all trips have the same fare, Demo Transit can omit fare_rules.txt. 
====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* || *transfer_duration* ||
|| only_fare || 1.00 || USD || 0 || 0 || 5400 ||

 

===Calculating an adult fare===
The trip planner calculates a fare of 1$ for each leg of the itinerary that includes a change of vehicle. Then it calculates the time for the itinerary. If the itinerary time is less than 90 minutes, the fare is 1$. 

------
== Example 4: Different pricing for local and express routes == 

Suppose Demo Transit agency has the following fare structure:
  * riders pay 1.75$ on boarding local buses (route R1)
  * riders pay 5$ on boarding express buses (routes R2 and R3)
  * transfers aren't allowed.

Since some trips cost more than others, Demo Transit must include fare_rules.txt. 
====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* ||
|| local_fare || 1.75 || USD || 0 || 0 ||
|| express_fare || 5.00 || USD || 0 || 0 ||


====fare_rules.txt====
|| *fare_id* || *contains_id* || *origin_id* || *destination_id* || *route_id* ||
|| local_fare ||  ||  ||  || R1 ||
|| express_fare ||  ||  ||  || R2 ||
|| express_fare ||  ||  ||  || R3 ||

 

===Calculating an adult fare===
The 5.00$ fare is only applicable if you ride routes 2 or 3. The 1.75$ fare only applies on route 1. If an itinerary uses routes 1 and 2, the fare is 6.75$. 

--------
== Example 5: Buying a transfer increases the fare  == 

Suppose Demo Transit agency has the following fare structure:
  * riders pay 1.75$ on boarding local buses
  * riders can pay an extra 0.25$ on boarding to purchase a transfer
  * transfers aren't allowed.

Since these rules apply to all trips, Demo Transit can omit fare_rules.txt. 
====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* ||
|| simple_fare || 1.75 || USD || 0 || 0 ||
|| plustransfer_fare || 2.00 || USD || 0 ||  || 5400 ||

 

===Calculating an adult fare===
Technically, both fares apply on both routes. However, the trip planner always chooses the least expensive applicable fare: 
  * For an itinerary with one transfer, simple_fare is 3.50$ vs. 2.00$ when a transfer is purchased. So the trip planner will report 2.00$ fare on all itineraries that require a change of vehicle. 
  * For an itinerary with no transfers, 1.75$ fare is less than plustransfer_fare of 2.00$. So if an itinerary doesn't require a change of vehicle, the fare is 1.75$. 

-------
== Example 6: Fare depends on station pairs, how you get there doesn't matter == 

In this example only the entry and exit points from the system matter.

To define this fare structure for the feed, fare_attributes.txt and fare_rules.txt must contain a line for each station-staion pair. In fare_attributes.txt, use the origin_id and destination_id fields to identify station pairs.

====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* ||
|| S1_to_S2 || 1.75 || USD || 0 || ||
|| S1_to_S3 || 3.25 || USD || 0 || ||
|| S1_to_S4 || 4.55 || USD || 0 || ||
|| ... || || || || ||
|| S10_to_S1 || 5.65 || USD || 0 || ||

====fare_rules.txt====
|| *fare_id* || *origin_id* || *destination_id* ||
|| S1_to_S2 || S1 || S2 ||
|| S1_to_S3 || S1 || S3 ||
|| S1_to_S4 || S1 || S4 ||
|| ... || || ||
|| S10_to_S1 || S10 || S1 ||

 

===Calculating an adult fare===
The trip planner calculates an itinerary, and then looks up the fare rules until it finds a matching origin/destination station pair.

The public feed from [http://bart.gov/stations/schedules/openformat.asp SF Bay Area BART] provides a real-world illustration of this type of fare structure.

--------
== Example 7: Fare depends on zones == 

Suppose Demo Transit Agency has a concentric three-zone system, where fares depend on which zones a rider passes through.

To define this fare structure for the feed, fare_attributes.txt and fare_rules.txt must contain a line for each possible combination of zones. For very complex cross-zone fare structures, it may be simpler to programmatically output fare_rules.txt using origin and destination to define fares.

====fare_attributes.txt====
|| *fare_id*  || *price* || *currency_type* || *payment_method* || *transfers* ||
|| F1 || $1.75 || USD || 0 ||  || 
|| F2 || $5.00 || USD || 0 ||  || 
|| F3 || $5.00 || USD || 0 ||  || 
|| F4 || $5.00 || USD || 0 ||  || 
|| F5 || $5.00 || USD || 0 ||  || 
|| F6 || $5.00 || USD || 0 ||  || 
|| F7 || $5.00 || USD || 0 ||  || 

===fare_rules.txt===
|| *fare_id* || *contains_id* ||
|| F1 || 1 ||
|| F1 || 2 ||
|| F1 || 3 ||
|| F2 || 1 ||
|| F2 || 2 ||
|| F3 || 1 ||
|| F3 || 3 ||
|| F4 || 2 ||
|| F4 || 3 ||
|| F5 || 1 ||
|| F6 || 2 ||
|| F7 || 3 ||

 

===Calculating an adult fare===
The trip planner calculates an itinerary, and then looks up the fare rules until it finds a matching origin/destination station pair.

The public feed from [http://developer.trimet.org/schedule/GTFS/ Portland TriMet] provides a real-world illustration of this type of fare structure.